from telegram import Update, KeyboardButton, ReplyKeyboardMarkup, InlineKeyboardMarkup, InlineKeyboardButton, WebAppInfo
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes, MessageHandler, filters
from telegram.error import ChatMigrated

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –æ–∂–∏–¥–∞–µ–º—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_states = {}
# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –º–∞–ø–ø–∏–Ω–≥–∞ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
forwarded_messages = {}

# ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –Ω–∞—Å—Ç–æ—è—â–∏–π ID –∞–¥–º–∏–Ω–∞)
GROUP_CHAT_ID = -1002277561873

# URL –¥–ª—è WebApp
web_app = WebAppInfo(url="https://choribot.ru/")

# –¢–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
TOKEN = "7571474973:AAF3bwSdOwf7MyZ6GM7-osHdYaJIGTZxzQg"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
application = Application.builder().token(TOKEN).build()

# –§—É–Ω–∫—Ü–∏—è, –≤—ã–∑—ã–≤–∞–µ–º–∞—è –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–æ–º–∞–Ω–¥—É /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    inline_keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("–ë—Ä–æ–Ω—å —Å—Ç–æ–ª–∞", web_app=web_app)],  # Inline –∫–Ω–æ–ø–∫–∞ —Å WebApp
        [InlineKeyboardButton("–û—Ç–∑—ã–≤", callback_data="review")],  # –ö–Ω–æ–ø–∫–∞ —Å callback_data
        [InlineKeyboardButton("–í–æ–ø—Ä–æ—Å –ø–æ –¥–æ—Å—Ç–∞–≤–∫–µ", callback_data="delivery_question")],  # –ö–Ω–æ–ø–∫–∞ —Å callback_data
        [InlineKeyboardButton("–°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º", callback_data="contact_manager")]  # –ï—â—ë –æ–¥–Ω–∞ Inline –∫–Ω–æ–ø–∫–∞
    ])
    await update.message.reply_text(
        text="–ù–∞–º–∞—Å—Ç–µ, –¥—Ä—É–∑—å—è‚òÄÔ∏è\n\n–†–∞–¥—ã –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –≤–∞—Å –≤ –Ω–∞—à–µ–º —á–∞—Ç-–±–æ—Ç–µ! –ó–¥–µ—Å—å –≤—ã —Å–º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç—ã –Ω–∞ –≤–∞—à–∏ –≤–æ–ø—Ä–æ—Å—ã, –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ –Ω–∞ —É–¥–æ–±–Ω–æ–π –ø–ª–æ—â–∞–¥–∫–µ, –∞ —Ç–∞–∫–∂–µ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–æ–ª–∏–∫ –≤ –æ–¥–∏–Ω –∫–ª–∏–∫. \n\n–í—ã–±–µ—Ä–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω—É–∂–Ω—É—é –≤–∞–º –æ–ø—Ü–∏—éüßòüèº‚Äç‚ôÄÔ∏è",
        reply_markup=inline_keyboard
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤
async def handle_callback_query(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == "review":
        inline_keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("–Ø–Ω–¥–µ–∫—Å –ö–∞—Ä—Ç—ã", url="https://yandex.ru/maps/org/chori/98310370984/reviews")],
            [InlineKeyboardButton("2–ì–ò–°", url="https://2gis.ru/voronezh/firm/70000001062575386/tab/reviews")]
        ])
        await query.message.reply_text(
            "–ù–∞–º –±–µ–∑—É–º–Ω–æ –ø—Ä–∏—è—Ç–Ω–æ, –∫–æ–≥–¥–∞ –≤—ã –æ—Å—Ç–∞–≤–ª—è–µ—Ç–µ —Å–≤–æ–µ –º–Ω–µ–Ω–∏–µ –æ –Ω–∞—à–µ–π —Ä–∞–±–æ—Ç–µ!"
            " –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å –æ—Ç–∑—ã–≤–æ–º –æ –Ω–∞—à–µ–º –∑–∞–≤–µ–¥–µ–Ω–∏–∏, –∏—Å–ø–æ–ª—å–∑—É—è –ø–ª–∞—Ç—Ñ–æ—Ä–º—É –Ω–∏–∂–µ ‚¨áÔ∏è",
            reply_markup=inline_keyboard
        )

    elif query.data == "delivery_question":
        inline_keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("–ü—Ä–æ–º–æ–∫–æ–¥ –∑–∞ –æ—Ç–∑—ã–≤", callback_data="promo_code")],
            [InlineKeyboardButton("–û—Å—Ç–∞–≤–∏—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ", callback_data="leave_request")]
        ])
        await query.message.reply_text(
            "–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã –ø–æ –¥–æ—Å—Ç–∞–≤–∫–µ, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –æ–ø—Ü–∏–π ‚¨áÔ∏è",
            reply_markup=inline_keyboard
        )
    elif query.data == "contact_manager":
        await query.message.reply_text(
            text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å, –∏ –Ω–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è!"
        )
        user_id = query.from_user.id
        user_states[user_id] = "awaiting_request"  

    user_id = query.from_user.id
    if query.data == "promo_code":
        await query.edit_message_text(
            text="–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥, –æ—Å—Ç–∞–≤—å—Ç–µ –æ—Ç–∑—ã–≤ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –¥–æ—Å—Ç–∞–≤–∫–∏ –∏ –ø—Ä–∏—à–ª–∏—Ç–µ –Ω–∞–º —Å–∫—Ä–∏–Ω—à–æ—Ç –≤ –æ—Ç–≤–µ—Ç–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏üí¨\n\n–ú—ã –æ–±—Ä–∞–±–æ—Ç–∞–µ–º –æ—Ç–∑—ã–≤ –∏ –æ—Ç–ø—Ä–∞–≤–∏–º –≤–∞–º –ø—Ä–∏—è—Ç–Ω—ã–π –±–æ–Ω—É—Å. –û–±—ã—á–Ω–æ —ç—Ç–æ –∑–∞–Ω–∏–º–∞–µ—Ç –º–µ–Ω—å—à–µ —Å—É—Ç–æ–∫."
        )
        user_states[user_id] = "awaiting_photo"
    elif query.data == "leave_request":
        await query.edit_message_text(
            text="–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã –ø–æ –¥–æ—Å—Ç–∞–≤–∫–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Å—Ç–∞–≤—å—Ç–µ –≤–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –≤ –æ—Ç–≤–µ—Ç–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏. –ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –∏ –ø–æ–º–æ–∂–µ—Ç —Ä–µ—à–∏—Ç—å –≤—Å–µ –ø—Ä–æ–±–ª–µ–º—ã‚¨áÔ∏è"
        )
        user_states[user_id] = "awaiting_request"

# –ü–µ—Ä–µ—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –≥—Ä—É–ø–ø—É
async def user_message_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global GROUP_CHAT_ID
    user = update.message.from_user
    user_id = user.id
    original_message = update.message
    try:
        # –ü—ã—Ç–∞–µ–º—Å—è –ø–µ—Ä–µ—Å–ª–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É
        forwarded_message = await context.bot.forward_message(
            chat_id=GROUP_CHAT_ID,
            from_chat_id=original_message.chat.id,
            message_id=original_message.message_id,
        )

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
        forwarded_messages[forwarded_message.message_id] = {
            "user_id": user_id,
            "original_message_id": original_message.message_id,
        }
        await update.message.reply_text("–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –º–µ–Ω–µ–¥–∂–µ—Ä—É.")

    except ChatMigrated as e:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ –≥—Ä—É–ø–ø—ã –≤ —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø—É
        GROUP_CHAT_ID = e.new_chat_id  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø—ã

        # –ü–æ–≤—Ç–æ—Ä—è–µ–º –ø–æ–ø—ã—Ç–∫—É –ø–µ—Ä–µ—Å–ª–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤—ã–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–º
        forwarded_message = await context.bot.forward_message(
            chat_id=GROUP_CHAT_ID,
            from_chat_id=original_message.chat.id,
            message_id=original_message.message_id,
        )

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
        forwarded_messages[forwarded_message.message_id] = {
            "user_id": user_id,
            "original_message_id": original_message.message_id,
        }

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∏–∑ –≥—Ä—É–ø–ø—ã
async def group_reply_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message.reply_to_message:
        return

    replied_message_id = update.message.reply_to_message.message_id

    if replied_message_id not in forwarded_messages:
        return

    user_info = forwarded_messages[replied_message_id]
    user_id = user_info["user_id"]
    reply_text = update.message.text

    await context.bot.send_message(chat_id=user_id, text=f"{reply_text}")
    await update.message.reply_text("–û—Ç–≤–µ—Ç –¥–æ—Å—Ç–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")


# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(handle_callback_query))
    application.add_handler(MessageHandler(filters.ChatType.PRIVATE & ~filters.COMMAND, user_message_handler))
    application.add_handler(MessageHandler(filters.Chat(GROUP_CHAT_ID) & ~filters.COMMAND, group_reply_handler))
    application.run_polling()

# –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
if __name__ == "__main__":
    main()
    